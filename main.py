import streamlit as st
import io
# import pdfplumber # Removido
from pdf2image import convert_from_bytes
from pdf2image.exceptions import PDFInfoNotInstalledError, PDFPageCountError, PDFSyntaxError
from PIL import Image
import os
import google.generativeai as genai
# Import specific types for exception handling
from google.generativeai.types import StopCandidateException
import re
import time
import math
import base64

# --- Page Configuration ---
st.set_page_config(
    page_title="Analisador Multimodal de Provas IA",
    page_icon="üì∏",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Constantes ---
MODEL_NAME = "gemini-2.5-pro-exp-03-25" # Ou "gemini-pro-vision" se preferir
PAGES_PER_BATCH = 2 # Analisar 2 p√°ginas por vez

# --- Fun√ß√µes Auxiliares ---

@st.cache_data(show_spinner="Convertendo PDF para imagens...")
def convert_pdf_to_images(_pdf_bytes): # Renomeado argumento para evitar shadowing
    """Converts PDF bytes into a list of PIL Image objects."""
    images = []
    error_message = None
    try:
        # Tenta usar m√∫ltiplos threads para acelerar, se poss√≠vel
        thread_count = os.cpu_count() if os.cpu_count() else 2
        images = convert_from_bytes(_pdf_bytes, dpi=200, fmt='png', thread_count=thread_count)
    except PDFInfoNotInstalledError:
        error_message = """
        Erro de Configura√ß√£o: Poppler n√£o encontrado.
        'pdf2image' requer a instala√ß√£o do utilit√°rio 'poppler'. Verifique as instru√ß√µes de instala√ß√£o para seu sistema (Linux: sudo apt-get install poppler-utils, macOS: brew install poppler, Windows: download e add ao PATH).
        """
    except PDFPageCountError:
        error_message = "Erro: N√£o foi poss√≠vel determinar o n√∫mero de p√°ginas no PDF. O arquivo pode estar corrompido."
    except PDFSyntaxError:
        error_message = "Erro: Sintaxe inv√°lida no PDF. O arquivo pode estar corrompido ou mal formatado."
    except Exception as e:
        error_message = f"Erro inesperado durante a convers√£o de PDF para imagem: {str(e)}"

    if not images and not error_message:
         error_message = "Nenhuma imagem p√¥de ser gerada a partir do PDF. Verifique se o arquivo n√£o est√° vazio ou protegido."

    return images, error_message

# --- Gemini Multimodal Analysis Function ---
def analyze_pages_with_gemini_multimodal(api_key, page_images_batch):
    """
    Analyzes a batch of PDF page images using Gemini's multimodal capabilities.
    """
    analysis_output = f"## An√°lise das P√°ginas (Batch de {len(page_images_batch)})\n\n"
    full_analysis_text = ""

    if not page_images_batch:
        st.warning("Nenhuma imagem de p√°gina recebida para an√°lise neste batch.")
        return "Nenhuma imagem de p√°gina fornecida para este batch."

    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel(
            model_name=MODEL_NAME,
            # safety_settings={ # Exemplo: Ajustar seguran√ßa se necess√°rio
            #     'HATE': 'BLOCK_NONE',
            #     'HARASSMENT': 'BLOCK_NONE',
            #     'SEXUAL' : 'BLOCK_NONE',
            #     'DANGEROUS' : 'BLOCK_NONE'
            # }
        )

        # --- Construct the Multimodal Prompt ---
        prompt_parts = [
            "**Instru√ß√£o Principal:** Voc√™ √© um professor especialista analisando p√°ginas de uma prova de concurso fornecidas como imagens. Sua tarefa √© identificar TODAS as quest√µes (com seus n√∫meros, texto completo, alternativas A,B,C,D,E ou formato Certo/Errado) e qualquer texto de contexto associado (como 'Texto I') vis√≠veis nas imagens a seguir.",
            "\n\n**Para CADA quest√£o identificada nas imagens fornecidas, forne√ßa uma an√°lise DETALHADA e DID√ÅTICA em formato Markdown, seguindo esta estrutura:**",
            "\n\n```markdown",
            "## Quest√£o [N√∫mero da Quest√£o] - An√°lise Detalhada",
            "",
            "### 1. Contexto Aplicado (se houver)",
            "*   Se a quest√£o se refere a um texto base ('Texto I', 'Leia o texto...', etc.) vis√≠vel nas imagens, resuma o ponto principal do contexto aqui.",
            "*   Se n√£o houver contexto expl√≠cito, indique 'Nenhum contexto espec√≠fico identificado para esta quest√£o.'",
            "",
            "### 2. Transcri√ß√£o da Quest√£o/Item",
            "*   Transcreva o comando principal da quest√£o e suas alternativas (A,B,C,D,E) ou a afirma√ß√£o (Certo/Errado) EXATAMENTE como visto na imagem.",
            "",
            "### 3. Julgamento/Resposta Correta",
            "*   Indique **CERTO**/**ERRADO** ou a **Alternativa Correta** (ex: **Alternativa C**). Forne√ßa apenas a resposta final aqui.",
            "",
            "### 4. Justificativa Completa",
            "*   Explique detalhadamente o racioc√≠nio. **CRUCIAL:** Se houver contexto, explique COMO ele leva √† resposta.",
            "*   Se C/E 'Errado', explique o erro. Se MC, explique por que a correta est√° certa E por que as outras alternativas est√£o erradas.",
            "",
            "### 5. Conhecimentos Avaliados",
            "*   Disciplina Principal e Assunto Espec√≠fico.",
            "",
            "### 6. Dicas e Pegadinhas (Opcional)",
            "*   H√° alguma dica √∫til ou pegadinha comum relacionada a esta quest√£o?",
            "```",
            "\n\n**IMPORTANTE:** Analise TODAS as quest√µes vis√≠veis nas imagens a seguir. Se uma quest√£o parecer continuar na pr√≥xima p√°gina (n√£o inclu√≠da neste batch), mencione isso claramente na an√°lise da quest√£o. Apresente as an√°lises das quest√µes na ordem em que aparecem nas p√°ginas.",
            "\n\n**IMAGENS DAS P√ÅGINAS PARA AN√ÅLISE:**\n"
        ]

        # Add images to the prompt
        for img in page_images_batch:
            buffer = io.BytesIO()
            try:
                 # WEBP lossless √© geralmente bom, mas pode aumentar o tamanho; PNG √© seguro.
                 # img.save(buffer, format="WEBP", lossless=True)
                 # mime_type = "image/webp"
                 img.save(buffer, format="PNG") # PNG √© mais compat√≠vel
                 mime_type = "image/png"
            except Exception as e_save:
                 st.warning(f"Falha ao salvar imagem como PNG ({e_save}), pulando esta imagem.")
                 continue # Pula para a pr√≥xima imagem se houver erro

            image_bytes = buffer.getvalue()
            prompt_parts.append({"mime_type": mime_type, "data": image_bytes})

        # --- Generate Content ---
        with st.spinner(f"Analisando {len(page_images_batch)} p√°gina(s) com IA Multimodal ({MODEL_NAME})... Esta etapa pode levar alguns minutos."):
            try:
                response = model.generate_content(prompt_parts, stream=False)

                # Process Response (Assume Gemini 1.5 Pro/Latest structure)
                if hasattr(response, 'text'):
                     full_analysis_text = response.text
                elif hasattr(response, 'parts') and response.parts:
                     full_analysis_text = "".join(part.text for part in response.parts if hasattr(part, "text"))
                elif response.prompt_feedback and response.prompt_feedback.block_reason:
                    block_reason = response.prompt_feedback.block_reason
                    block_message = response.prompt_feedback.block_reason_message or f"Reason code: {block_reason}"
                    full_analysis_text = f"**An√°lise Bloqueada pela API:** {block_message}"
                    st.error(f"A an√°lise multimodal foi bloqueada pela API: {block_message}")
                else:
                     full_analysis_text = "A API retornou uma resposta vazia ou em formato n√£o esperado."
                     st.warning(f"Resposta inesperada ou vazia da an√°lise: {response}")

            except StopCandidateException as stop_e:
                 full_analysis_text = f"\n\n**Erro de Gera√ß√£o:** A an√°lise foi interrompida prematuramente. Causa prov√°vel: {stop_e}. Verifique as pol√≠ticas de conte√∫do ou tente novamente."
                 st.error(f"Erro na Gera√ß√£o Gemini (StopCandidateException): A resposta foi interrompida. Detalhes: {stop_e}")
            except Exception as e:
                 st.error(f"Erro durante a chamada da API Gemini: {str(e)}")
                 full_analysis_text += f"\n\n**Erro Cr√≠tico na An√°lise:** N√£o foi poss√≠vel completar a an√°lise devido a um erro inesperado: {str(e)}"

        analysis_output += full_analysis_text

    except Exception as e:
        st.error(f"Erro geral durante a prepara√ß√£o ou an√°lise multimodal: {str(e)}")
        analysis_output += f"\n\n**Erro Cr√≠tico:** Falha inesperada: {str(e)}"

    return analysis_output

# --- Callback Function ---
def sync_batch_selection():
    """
    Callback para garantir que a sele√ß√£o do selectbox seja processada
    antes da pr√≥xima renderiza√ß√£o completa do script.
    O valor j√° est√° em st.session_state.selected_batch devido ao 'key'.
    """
    # print(f"Callback sync_batch_selection: st.session_state.selected_batch is now '{st.session_state.get('selected_batch')}'")
    # N√£o precisa fazer nada aqui, mas a exist√™ncia do callback ajuda no fluxo do Streamlit.
    pass


# --- Streamlit Interface ---

st.title("üì∏ Analisador Multimodal de Provas com IA (Gemini)")
st.markdown(f"""
Envie um arquivo de prova em **PDF**. A ferramenta converter√° as p√°ginas em imagens e usar√° IA multimodal ({MODEL_NAME}) para identificar e analisar as quest√µes **diretamente das imagens**.
Ideal para PDFs escaneados ou onde a extra√ß√£o de texto falha.
**Aviso:** Requer `poppler` instalado. Processamento pode ser mais lento e custoso que an√°lise baseada em texto.
""")

# --- Sidebar ---
with st.sidebar:
    st.header("‚öôÔ∏è Configura√ß√µes")
    api_key = st.text_input("Sua Chave API do Google Gemini", type="password", help=f"Necess√°ria para usar o {MODEL_NAME}.")

    st.subheader("Op√ß√µes de An√°lise")
    # Batch selection populated after upload dynamically below

    st.markdown("---")
    st.markdown(f"""
    ### Como Usar:
    1.  Cole sua chave API do Google Gemini.
    2.  Fa√ßa o upload do arquivo PDF.
    3.  Aguarde a convers√£o (pode levar um tempo).
    4.  Selecione o **batch de p√°ginas** desejado. O bot√£o "Analisar" deve habilitar.
    5.  Clique em "Analisar Batch Selecionado".
    6.  Aguarde a an√°lise multimodal pela IA.
    7.  **Repita os passos 4-6 para outros batches do mesmo PDF.**
    8.  Visualize ou baixe o resultado do batch atual.
    """)
    st.markdown("---")
    st.info("A precis√£o depende da qualidade da imagem e da capacidade da IA. Verifique os resultados.")
    st.warning("**Depend√™ncia Externa:** Requer `poppler` instalado no ambiente de execu√ß√£o.")

# --- Main Area Logic ---

# Initialize session state variables if they don't exist
default_state = {
    'analysis_result': None,
    'error_message': None,
    'pdf_page_images': [], # Stores PIL Images
    'analysis_running': False,
    'uploaded_file_id': None,
    'batch_options': [],
    'selected_batch': None,
    'total_pages': 0,
    'original_filename': None
}
for key, value in default_state.items():
    if key not in st.session_state:
        st.session_state[key] = value

st.write("## üìÑ 1. Upload da Prova (PDF)")
uploaded_file = st.file_uploader(
    "Selecione o arquivo PDF",
    type=["pdf"],
    key="file_uploader_pdf_multimodal" # Consistent key
)

# --- Logic after file upload ---
if uploaded_file is not None:
    current_file_id = f"{uploaded_file.name}-{uploaded_file.size}"

    if current_file_id != st.session_state.uploaded_file_id:
        st.info(f"Novo arquivo detectado: '{uploaded_file.name}'. Iniciando processamento...")
        st.session_state.uploaded_file_id = current_file_id
        st.session_state.original_filename = uploaded_file.name
        # Resetar tudo relacionado ao arquivo anterior
        for key in default_state:
             if key != 'uploaded_file_id' and key != 'original_filename': # Preservar o novo ID/nome
                  st.session_state[key] = default_state[key]

        # --- Step 1: Convert PDF to Images ---
        pdf_bytes = uploaded_file.getvalue()
        images, error = convert_pdf_to_images(pdf_bytes)

        if error:
            st.error(f"Falha na Convers√£o do PDF: {error}")
            st.session_state.error_message = f"Falha na Convers√£o do PDF: {error}"
            st.session_state.pdf_page_images = []
        elif not images:
            st.warning("Nenhuma imagem foi gerada a partir do PDF.")
            st.session_state.error_message = "Nenhuma imagem foi gerada a partir do PDF."
            st.session_state.pdf_page_images = []
        else:
            st.session_state.pdf_page_images = images
            st.session_state.total_pages = len(images)
            st.success(f"Convers√£o conclu√≠da! {st.session_state.total_pages} p√°ginas prontas para an√°lise.")

            # --- Generate Batch Options ---
            num_batches = math.ceil(st.session_state.total_pages / PAGES_PER_BATCH)
            batch_opts = []
            if st.session_state.total_pages > 1:
                 batch_opts.append("Analisar Todas")
            for i in range(num_batches):
                start_page = i * PAGES_PER_BATCH + 1
                end_page = min((i + 1) * PAGES_PER_BATCH, st.session_state.total_pages)
                if start_page == end_page:
                     batch_opts.append(f"P√°gina {start_page}")
                else:
                     batch_opts.append(f"P√°ginas {start_page}-{end_page}")

            st.session_state.batch_options = batch_opts
            # Definir sele√ß√£o inicial (primeiro batch espec√≠fico, se houver, sen√£o a primeira op√ß√£o)
            if len(batch_opts) > 1 and "Analisar Todas" in batch_opts:
                 st.session_state.selected_batch = batch_opts[1]
            elif batch_opts:
                 st.session_state.selected_batch = batch_opts[0]
            else:
                 st.session_state.selected_batch = None

            # Rerun para atualizar a UI com as novas op√ß√µes e sele√ß√£o padr√£o
            st.rerun()

# --- Display file details and batch selection UI (if images are ready) ---
if st.session_state.pdf_page_images:
    file_name_display = f"'{st.session_state.original_filename}'" if st.session_state.original_filename else "Carregado"
    st.success(f"Arquivo {file_name_display} processado. {st.session_state.total_pages} p√°ginas prontas.")

    with st.expander("Visualizar P√°ginas Convertidas (Miniaturas)"):
        max_preview = 10
        cols = st.columns(5)
        for i, img in enumerate(st.session_state.pdf_page_images[:max_preview]):
            with cols[i % 5]:
                try:
                    st.image(img, caption=f"P√°gina {i+1}", width=120)
                except Exception as img_disp_err:
                    st.warning(f"Erro exibindo P√°g {i+1}: {img_disp_err}")
        if st.session_state.total_pages > max_preview:
            st.markdown(f"*(Pr√©-visualiza√ß√£o limitada √†s primeiras {max_preview} de {st.session_state.total_pages} p√°ginas)*")

    # --- Batch Selection UI (Sidebar) ---
    with st.sidebar:
         st.subheader("üéØ Selecionar Batch de P√°ginas")
         if st.session_state.batch_options:
              current_selection = st.session_state.get('selected_batch')
              try:
                   # Apenas encontra o √≠ndice da sele√ß√£o atual para exibi√ß√£o
                   current_index = st.session_state.batch_options.index(current_selection)
              except (ValueError, IndexError):
                   # Se sele√ß√£o atual inv√°lida ou None, default para √≠ndice 0
                   current_index = 0
                   # N√£o precisa redefinir st.session_state.selected_batch aqui

              # MODIFICA√á√ÉO: Adicionado on_change=sync_batch_selection
              st.selectbox(
                  "Escolha o intervalo de p√°ginas:",
                  options=st.session_state.batch_options,
                  index=current_index,
                  key='selected_batch', # Vincula ao estado
                  on_change=sync_batch_selection, # Chama o callback na mudan√ßa
                  help="Selecione as p√°ginas a serem enviadas para an√°lise pela IA."
              )
         else:
              st.info("Fa√ßa upload de um PDF para ver as op√ß√µes.")

    # --- Analysis Trigger ---
    st.write("## ‚öôÔ∏è 2. Iniciar An√°lise Multimodal do Batch")
    selected_batch_display = st.session_state.get('selected_batch', 'None') # Usa 'None' se vazio

    # Debug (opcional): Verificar o estado antes de renderizar o bot√£o
    # st.write(f"DEBUG (Pre-Button): selected_batch='{st.session_state.get('selected_batch')}', analysis_running={st.session_state.analysis_running}")

    analyze_button = st.button(
         f"Analisar Batch Selecionado ({selected_batch_display})",
         type="primary",
         use_container_width=True,
         disabled=st.session_state.analysis_running or not st.session_state.selected_batch or not st.session_state.pdf_page_images or not api_key
    )

    if analyze_button:
        # Verifica√ß√µes pr√©-an√°lise
        if not api_key:
            st.error("‚ö†Ô∏è Por favor, insira sua Chave API do Google Gemini na barra lateral.")
            st.stop()
        if not st.session_state.selected_batch:
             st.error("‚ö†Ô∏è Por favor, selecione um batch de p√°ginas v√°lido na barra lateral.")
             st.stop()
        if not st.session_state.pdf_page_images:
             st.error("‚ö†Ô∏è Nenhuma imagem de p√°gina encontrada. Fa√ßa upload e converta um PDF primeiro.")
             st.stop()

        # --- Iniciar o processo de an√°lise ---
        st.session_state.analysis_running = True
        st.session_state.analysis_result = None # Limpa resultado anterior
        st.session_state.error_message = None   # Limpa erro anterior
        # MODIFICA√á√ÉO: Removido st.rerun() daqui

# --- Handle Analysis Execution ---
# Este bloco executa se analysis_running for True (definido pelo clique no bot√£o)
if st.session_state.analysis_running:
     # Mostra o spinner durante a prepara√ß√£o e execu√ß√£o
     with st.spinner(f"Preparando e analisando o batch '{st.session_state.selected_batch}'... Isso pode levar um tempo."):
        # --- Determina as p√°ginas ---
        pages_to_process = []
        selected = st.session_state.selected_batch # Usa o valor que DEVE estar correto agora
        all_images = st.session_state.pdf_page_images
        total_pg = st.session_state.total_pages

        if selected == "Analisar Todas":
            pages_to_process = all_images
            st.info(f"Processando todas as {total_pg} p√°ginas...")
        else:
            nums_str = re.findall(r'\d+', selected)
            try:
                if len(nums_str) == 1:
                    start_page_label = int(nums_str[0])
                    end_page_label = start_page_label
                elif len(nums_str) == 2:
                    start_page_label = int(nums_str[0])
                    end_page_label = int(nums_str[1])
                else:
                    raise ValueError(f"Formato de batch inesperado: {selected}")

                start_index = start_page_label - 1
                end_index = end_page_label

                if 0 <= start_index < total_pg and start_index < end_index <= total_pg:
                    pages_to_process = all_images[start_index:end_index]
                    st.info(f"Analisando p√°ginas de {start_page_label} a {end_page_label}...")
                else:
                    st.warning(f"Intervalo inv√°lido ({start_page_label}-{end_page_label}) para {total_pg} p√°ginas.")
                    pages_to_process = []
            except ValueError as parse_e:
                st.error(f"Erro ao interpretar batch '{selected}': {parse_e}.")
                pages_to_process = []

        # --- Executa a an√°lise ---
        analysis_result_text = None
        if pages_to_process:
            analysis_result_text = analyze_pages_with_gemini_multimodal(
                    api_key,
                    pages_to_process,
                )
            st.session_state.analysis_result = analysis_result_text
            if "Erro" in (analysis_result_text or "") or "Bloqueada" in (analysis_result_text or ""):
                 st.session_state.error_message = "Erro durante a an√°lise pela IA. Verifique os detalhes."
        else:
            if not st.session_state.error_message: # Evita sobrescrever erro de parsing
                  st.session_state.error_message = "Nenhuma p√°gina selecionada para an√°lise neste batch."

        # --- An√°lise conclu√≠da ---
        st.session_state.analysis_running = False
        # MODIFICA√á√ÉO: st.rerun() movido para c√°
        st.rerun() # Atualiza a UI para mostrar resultado/erro e reabilitar bot√£o

# --- Display Results or Errors ---
if st.session_state.error_message and not st.session_state.analysis_running:
    st.error(f"‚ö†Ô∏è {st.session_state.error_message}")

if st.session_state.analysis_result and not st.session_state.analysis_running:
    st.write(f"## üìä 3. Resultado da An√°lise Multimodal (Batch: {st.session_state.get('selected_batch', 'N/A')})")
    st.markdown(st.session_state.analysis_result, unsafe_allow_html=False)

    # --- Download Button ---
    try:
        original_filename_base = "prova"
        if st.session_state.original_filename:
             original_filename_base = os.path.splitext(st.session_state.original_filename)[0]
             original_filename_base = re.sub(r'[^\w\d-]+', '_', original_filename_base)

        batch_suffix = "completo"
        if st.session_state.selected_batch:
             batch_suffix = re.sub(r'[^\w\d-]+', '_', st.session_state.selected_batch).strip('_')

        download_filename = f"analise_multimodal_{original_filename_base}_batch_{batch_suffix}.md"

        st.download_button(
            label=f"üì• Baixar An√°lise do Batch Atual ({st.session_state.get('selected_batch', 'N/A')}) (Markdown)",
            data=(st.session_state.analysis_result or "").encode('utf-8'), # Garante que seja string antes de encode
            file_name=download_filename,
            mime="text/markdown"
        )
    except Exception as dl_e:
        st.warning(f"N√£o foi poss√≠vel gerar o bot√£o de download: {dl_e}")


# --- Footer ---
st.markdown("---")
st.markdown(f"""
**Desenvolvido como ferramenta de aux√≠lio aos estudos.** Utiliza IA Multimodal ({MODEL_NAME}).
*Resultados dependem da qualidade da imagem e da IA. Verifique sempre.*
| Depend√™ncias: [Streamlit](https://streamlit.io/), [Google Gemini API](https://ai.google.dev/), [pdf2image](https://github.com/Belval/pdf2image), [Pillow](https://python-pillow.org/) | **Requer Poppler**
""")