import streamlit as st
import io
from pdf2image import convert_from_bytes
from pdf2image.exceptions import PDFInfoNotInstalledError, PDFPageCountError, PDFSyntaxError
from PIL import Image
import os
import google.generativeai as genai
from google.generativeai.types import StopCandidateException
import re
import time
import math
import base64

# --- Page Configuration ---
st.set_page_config(
    page_title="Analisador Multimodal de Provas IA",
    page_icon="üì∏",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Constantes ---
MODEL_NAME = "gemini-2.5-pro-exp-05-23" # Ou "gemini-pro-vision" se preferir
PAGES_PER_BATCH = 2 # Analisar 2 p√°ginas por vez

# --- Fun√ß√µes Auxiliares ---

@st.cache_data(show_spinner="Convertendo PDF para imagens...")
def convert_pdf_to_images(_pdf_bytes): # Renomeado argumento para evitar shadowing
    """Converts PDF bytes into a list of PIL Image objects."""
    images = []
    error_message = None
    try:
        images = convert_from_bytes(_pdf_bytes, dpi=200, fmt='png', thread_count=os.cpu_count()) # Usar mais threads se dispon√≠vel
    except PDFInfoNotInstalledError:
        error_message = """
        Erro de Configura√ß√£o: Poppler n√£o encontrado.
        'pdf2image' requer a instala√ß√£o do utilit√°rio 'poppler'. Verifique as instru√ß√µes de instala√ß√£o para seu sistema.
        """
    except PDFPageCountError:
        error_message = "Erro: N√£o foi poss√≠vel determinar o n√∫mero de p√°ginas no PDF. O arquivo pode estar corrompido."
    except PDFSyntaxError:
        error_message = "Erro: Sintaxe inv√°lida no PDF. O arquivo pode estar corrompido ou mal formatado."
    except Exception as e:
        error_message = f"Erro inesperado durante a convers√£o de PDF para imagem: {str(e)}"

    if not images and not error_message:
         error_message = "Nenhuma imagem p√¥de ser gerada a partir do PDF. Verifique se o arquivo n√£o est√° vazio ou protegido."

    return images, error_message

def analyze_pages_with_gemini_multimodal(api_key, page_images_batch):
    """
    Analyzes a batch of PDF page images using Gemini's multimodal capabilities.
    """
    analysis_output = f"## An√°lise das P√°ginas (Batch de {len(page_images_batch)})\n\n"
    full_analysis_text = ""

    if not page_images_batch:
        st.warning("Nenhuma imagem de p√°gina recebida para an√°lise neste batch.")
        return "Nenhuma imagem de p√°gina fornecida para este batch."

    try:
        genai.configure(api_key=api_key)
        # Use o modelo mais recente ou o pro-vision se preferir
        model = genai.GenerativeModel(
            model_name=MODEL_NAME,
            # safety_settings={ # Exemplo: Ajustar seguran√ßa se necess√°rio
            #     'HATE': 'BLOCK_NONE',
            #     'HARASSMENT': 'BLOCK_NONE',
            #     'SEXUAL' : 'BLOCK_NONE',
            #     'DANGEROUS' : 'BLOCK_NONE'
            # }
        )

        # --- Construct the Multimodal Prompt ---
        prompt_parts = [
            "**Instru√ß√£o Principal:** Voc√™ √© um professor especialista analisando p√°ginas de uma prova de concurso fornecidas como imagens. Sua tarefa √© identificar TODAS as quest√µes (com seus n√∫meros, texto completo, alternativas A,B,C,D,E ou formato Certo/Errado) e qualquer texto de contexto associado (como 'Texto I') vis√≠veis nas imagens a seguir.",
            "\n\n**Para CADA quest√£o identificada nas imagens fornecidas, forne√ßa uma an√°lise DETALHADA e DID√ÅTICA em formato Markdown, seguindo esta estrutura:**",
            "\n\n```markdown",
            "## Quest√£o [N√∫mero da Quest√£o] - An√°lise Detalhada",
            "",
            "### 1. Contexto Aplicado (se houver)",
            "*   Se a quest√£o se refere a um texto base ('Texto I', 'Leia o texto...', etc.) vis√≠vel nas imagens, resuma o ponto principal do contexto aqui.",
            "*   Se n√£o houver contexto expl√≠cito, indique 'Nenhum contexto espec√≠fico identificado para esta quest√£o.'",
            "",
            "### 2. Transcri√ß√£o da Quest√£o/Item",
            "*   Transcreva o comando principal da quest√£o e suas alternativas (A,B,C,D,E) ou a afirma√ß√£o (Certo/Errado) EXATAMENTE como visto na imagem.",
            "",
            "### 3. Julgamento/Resposta Correta",
            "*   Indique **CERTO**/**ERRADO** ou a **Alternativa Correta** (ex: **Alternativa C**). Forne√ßa apenas a resposta final aqui.", # Simplificado para clareza do modelo
            "",
            "### 4. Justificativa Completa",
            "*   Explique detalhadamente o racioc√≠nio. **CRUCIAL:** Se houver contexto, explique COMO ele leva √† resposta.",
            "*   Se C/E 'Errado', explique o erro. Se MC, explique por que a correta est√° certa E por que as outras alternativas est√£o erradas.",
            "",
            "### 5. Conhecimentos Avaliados",
            "*   Disciplina Principal e Assunto Espec√≠fico.",
            "",
            "### 6. Dicas e Pegadinhas (Opcional)",
            "*   H√° alguma dica √∫til ou pegadinha comum relacionada a esta quest√£o?",
            "```",
            "\n\n**IMPORTANTE:** Analise TODAS as quest√µes vis√≠veis nas imagens a seguir. Se uma quest√£o parecer continuar na pr√≥xima p√°gina (n√£o inclu√≠da neste batch), mencione isso claramente na an√°lise da quest√£o. Apresente as an√°lises das quest√µes na ordem em que aparecem nas p√°ginas.",
            "\n\n**IMAGENS DAS P√ÅGINAS PARA AN√ÅLISE:**\n"
        ]

        # Add images to the prompt
        for img in page_images_batch:
            buffer = io.BytesIO()
            # Tente salvar como WEBP para efici√™ncia, fallback para PNG se houver erro
            try:
                 img.save(buffer, format="WEBP", lossless=True, quality=90) # Ajuste qualidade se precisar
                 mime_type = "image/webp"
            except Exception as e_webp:
                 st.warning(f"Falha ao salvar como WEBP ({e_webp}), usando PNG.")
                 buffer = io.BytesIO() # Reset buffer
                 img.save(buffer, format="PNG")
                 mime_type = "image/png"

            image_bytes = buffer.getvalue()
            prompt_parts.append({"mime_type": mime_type, "data": image_bytes})

        # --- Generate Content ---
        # Use um spinner espec√≠fico para a chamada da API
        with st.spinner(f"Analisando {len(page_images_batch)} p√°gina(s) com IA Multimodal ({MODEL_NAME})... Esta etapa pode levar alguns minutos."):
            try:
                # Use generate_content para modelos mais recentes
                response = model.generate_content(prompt_parts, stream=False)

                # Process Response (Gemini 1.5 Pro e outros modelos mais recentes)
                if response.parts:
                     full_analysis_text = "".join(part.text for part in response.parts if hasattr(part, "text"))
                # Verifica√ß√£o de bloqueio de seguran√ßa
                elif response.prompt_feedback and response.prompt_feedback.block_reason:
                    block_reason = response.prompt_feedback.block_reason
                    block_message = response.prompt_feedback.block_reason_message or f"Reason code: {block_reason}"
                    full_analysis_text = f"**An√°lise Bloqueada pela API:** {block_message}"
                    st.error(f"A an√°lise multimodal foi bloqueada pela API: {block_message}")
                # Caso de resposta vazia ou formato inesperado
                else:
                     full_analysis_text = "A API retornou uma resposta vazia ou em formato n√£o esperado."
                     st.warning(f"Resposta inesperada ou vazia da an√°lise: {response}")

            # Captura de exce√ß√µes espec√≠ficas da API e gen√©ricas
            except StopCandidateException as stop_e:
                 full_analysis_text = f"\n\n**Erro de Gera√ß√£o:** A an√°lise foi interrompida prematuramente. Causa prov√°vel: {stop_e}. Verifique as pol√≠ticas de conte√∫do ou tente novamente."
                 st.error(f"Erro na Gera√ß√£o Gemini (StopCandidateException): A resposta foi interrompida. Detalhes: {stop_e}")
            except Exception as e:
                 st.error(f"Erro durante a chamada da API Gemini: {str(e)}")
                 full_analysis_text += f"\n\n**Erro Cr√≠tico na An√°lise:** N√£o foi poss√≠vel completar a an√°lise devido a um erro inesperado: {str(e)}"

        analysis_output += full_analysis_text

    except Exception as e:
        # Captura erros na configura√ß√£o do genai ou outras exce√ß√µes gerais
        st.error(f"Erro geral durante a prepara√ß√£o ou an√°lise multimodal: {str(e)}")
        analysis_output += f"\n\n**Erro Cr√≠tico:** Falha inesperada: {str(e)}"

    return analysis_output

# --- Streamlit Interface ---

st.title("üì∏ Analisador Multimodal de Provas com IA (Gemini)")
st.markdown(f"""
Envie um arquivo de prova em **PDF**. A ferramenta converter√° as p√°ginas em imagens e usar√° IA multimodal ({MODEL_NAME}) para identificar e analisar as quest√µes **diretamente das imagens**.
Ideal para PDFs escaneados ou onde a extra√ß√£o de texto falha.
**Aviso:** Requer `poppler` instalado. Processamento pode ser mais lento e custoso que an√°lise baseada em texto.
""")

# --- Sidebar ---
with st.sidebar:
    st.header("‚öôÔ∏è Configura√ß√µes")
    api_key = st.text_input("Sua Chave API do Google Gemini", type="password", help=f"Necess√°ria para usar o {MODEL_NAME}.")

    st.subheader("Op√ß√µes de An√°lise")
    # Batch selection populated after upload dynamically below

    st.markdown("---")
    st.markdown(f"""
    ### Como Usar:
    1.  Cole sua chave API do Google Gemini.
    2.  Fa√ßa o upload do arquivo PDF.
    3.  Aguarde a convers√£o (pode levar um tempo).
    4.  Selecione o **batch de p√°ginas** desejado.
    5.  Clique em "Analisar Batch Selecionado".
    6.  Aguarde a an√°lise multimodal pela IA.
    7.  **Repita os passos 4-6 para outros batches do mesmo PDF.**
    8.  Visualize ou baixe o resultado do batch atual.
    """)
    st.markdown("---")
    st.info("A precis√£o depende da qualidade da imagem e da capacidade da IA. Verifique os resultados.")
    st.warning("**Depend√™ncia Externa:** Requer `poppler` instalado no ambiente de execu√ß√£o.")

# --- Main Area Logic ---

# Initialize session state variables if they don't exist
if 'results_by_batch' not in st.session_state:
    st.session_state.results_by_batch = {}  # Armazena resultados de an√°lise por batch

default_state = {
    'analysis_result': None,
    'error_message': None,
    'pdf_page_images': [], # Stores PIL Images
    'analysis_running': False,
    'uploaded_file_id': None,
    'batch_options': [],
    'selected_batch': None,
    'total_pages': 0,
    'original_filename': None,
    'results_by_batch': {} # Inicializado acima
}
for key, value in default_state.items():
    if key not in st.session_state:
        st.session_state[key] = value

st.write("## üìÑ 1. Upload da Prova (PDF)")
uploaded_file = st.file_uploader(
    "Selecione o arquivo PDF",
    type=["pdf"],
    key="file_uploader_pdf_multimodal" # Consistent key
)

# --- Logic after file upload ---
if uploaded_file is not None:
    # Use file name and size as a simple ID
    current_file_id = f"{uploaded_file.name}-{uploaded_file.size}"

    # Check if it's a NEW file compared to the one stored in session state
    if current_file_id != st.session_state.uploaded_file_id:
        st.info(f"Novo arquivo detectado: '{uploaded_file.name}'. Iniciando processamento...")
        # Reset state for the new file
        st.session_state.uploaded_file_id = current_file_id
        st.session_state.original_filename = uploaded_file.name
        st.session_state.pdf_page_images = []
        st.session_state.analysis_result = None
        st.session_state.error_message = None
        st.session_state.batch_options = []
        st.session_state.selected_batch = None
        st.session_state.analysis_running = False # Ensure analysis is not marked as running
        st.session_state.results_by_batch = {} # Limpa resultados anteriores de outro arquivo

        # --- Step 1: Convert PDF to Images ---
        pdf_bytes = uploaded_file.getvalue()
        # The function call uses the cache if bytes match previous calls
        images, error = convert_pdf_to_images(pdf_bytes)

        if error:
            st.error(f"Falha na Convers√£o do PDF: {error}")
            st.session_state.error_message = f"Falha na Convers√£o do PDF: {error}"
            # Stop processing for this file if conversion fails
            st.session_state.pdf_page_images = [] # Ensure image list is empty
        elif not images:
            st.warning("Nenhuma imagem foi gerada a partir do PDF.")
            st.session_state.error_message = "Nenhuma imagem foi gerada a partir do PDF."
            st.session_state.pdf_page_images = []
        else:
            # SUCCESS: Store images and create batch options
            st.session_state.pdf_page_images = images
            st.session_state.total_pages = len(images)
            st.success(f"Convers√£o conclu√≠da! {st.session_state.total_pages} p√°ginas prontas para an√°lise.")

            # --- Generate Batch Options based on Pages ---
            num_batches = math.ceil(st.session_state.total_pages / PAGES_PER_BATCH)
            batch_opts = [] # Start fresh
            # Always add "Analisar Todas" if more than one page
            if st.session_state.total_pages > 1:
                 batch_opts.append("Analisar Todas")

            # Add specific batch options
            for i in range(num_batches):
                start_page = i * PAGES_PER_BATCH + 1
                end_page = min((i + 1) * PAGES_PER_BATCH, st.session_state.total_pages)
                if start_page == end_page:
                     batch_opts.append(f"P√°gina {start_page}")
                else:
                     batch_opts.append(f"P√°ginas {start_page}-{end_page}")

            st.session_state.batch_options = batch_opts
            # Set default selection (first specific batch, or 'Analisar Todas' if only one page/batch)
            if len(batch_opts) > 1 and "Analisar Todas" in batch_opts:
                 st.session_state.selected_batch = batch_opts[1] # Select first specific batch e.g., "P√°ginas 1-2"
            elif batch_opts:
                 st.session_state.selected_batch = batch_opts[0] # Select the only option available
            else:
                 st.session_state.selected_batch = None # Should not happen if images were generated

            # Use rerun to update the UI immediately after conversion and batch option generation
            st.rerun()

# --- Display file details and batch selection UI (if images are ready) ---
if st.session_state.pdf_page_images:
    # Display confirmation that file is ready
    file_name_display = f"'{st.session_state.original_filename}'" if st.session_state.original_filename else "Carregado"
    st.success(f"Arquivo {file_name_display} processado. {st.session_state.total_pages} p√°ginas prontas.")

    # --- Expander for Page Thumbnails ---
    with st.expander("Visualizar P√°ginas Convertidas (Miniaturas)"):
        # Limit preview to avoid excessive rendering time/memory
        max_preview = 10
        cols = st.columns(5) # Display up to 5 thumbnails per row
        for i, img in enumerate(st.session_state.pdf_page_images[:max_preview]):
            with cols[i % 5]:
                try:
                    # Use a smaller width for thumbnails
                    st.image(img, caption=f"P√°gina {i+1}", width=120)
                except Exception as img_disp_err:
                    st.warning(f"Erro exibindo P√°g {i+1}: {img_disp_err}")

        if st.session_state.total_pages > max_preview:
            st.markdown(f"*(Pr√©-visualiza√ß√£o limitada √†s primeiras {max_preview} de {st.session_state.total_pages} p√°ginas)*")

# --- Batch Selection UI (Sidebar) ---
with st.sidebar:
    st.subheader("üéØ Selecionar Batch de P√°ginas")
    if st.session_state.batch_options:
        # Crie uma chave exclusiva para o selectbox que N√ÉO seja vinculada ao session_state
        # Isso impede que o Streamlit redefina a sele√ß√£o automaticamente
        
        # Inicialize selected_batch se ainda n√£o estiver definido
        if st.session_state.selected_batch is None and st.session_state.batch_options:
            if len(st.session_state.batch_options) > 1 and "Analisar Todas" in st.session_state.batch_options:
                st.session_state.selected_batch = st.session_state.batch_options[1]  # Primeiro batch espec√≠fico
            else:
                st.session_state.selected_batch = st.session_state.batch_options[0]  # Primeira op√ß√£o
        
        # Encontre o √≠ndice atual na lista de op√ß√µes
        try:
            current_index = st.session_state.batch_options.index(st.session_state.selected_batch)
        except (ValueError, TypeError):
            current_index = 0
            if st.session_state.batch_options:
                st.session_state.selected_batch = st.session_state.batch_options[current_index]
        
        # Criamos uma fun√ß√£o callback para atualizar o valor selecionado
        def update_batch_selection():
            # Obt√©m o valor do widget pelo valor da chave
            selected_value = st.session_state.batch_selector_widget
            # Atualiza session_state apenas se o valor for diferente
            if selected_value != st.session_state.selected_batch:
                st.session_state.selected_batch = selected_value
                
                # Verificar se j√° existe resultado para esse batch
                if selected_value in st.session_state.results_by_batch:
                    st.session_state.analysis_result = st.session_state.results_by_batch[selected_value]
                    st.success(f"Carregado resultado existente para o batch '{selected_value}'")
        
        # Usa o selectbox com uma chave √∫nica e uma fun√ß√£o callback
        batch_selection = st.selectbox(
            "Escolha o intervalo de p√°ginas:",
            options=st.session_state.batch_options,
            index=current_index,
            key="batch_selector_widget",
            on_change=update_batch_selection,
            help="Selecione as p√°ginas a serem enviadas para an√°lise pela IA."
        )
        
        # Exibir estado atual para debug (opcional, pode remover em produ√ß√£o)
        st.sidebar.caption(f"Batch selecionado: {st.session_state.selected_batch}")
    else:
        st.info("Aguardando op√ß√µes de batch...")

    # --- Estado das An√°lises ---
    if st.session_state.results_by_batch:
        st.sidebar.subheader("üìä Batch(es) Analisado(s)")
        for batch_name in st.session_state.results_by_batch.keys():
            st.sidebar.success(f"‚úÖ {batch_name}")

    # --- Analysis Trigger ---
    st.write("## ‚öôÔ∏è 2. Iniciar An√°lise Multimodal do Batch")
    # Ensure selected_batch from state is used for the button label
    selected_batch_display = st.session_state.get('selected_batch', 'Nenhum')
    
    # Verifica se o batch j√° foi analisado
    batch_already_analyzed = selected_batch_display in st.session_state.results_by_batch
    
    button_text = (
        f"Analisar Batch Selecionado ({selected_batch_display})" 
        if not batch_already_analyzed else 
        f"Atualizar An√°lise do Batch ({selected_batch_display})"
    )
    
    analyze_button = st.button(
         button_text,
         type="primary",
         use_container_width=True,
         # Disable if analysis running, no batch selected, no images, or no API key
         disabled=st.session_state.analysis_running or not st.session_state.selected_batch or not st.session_state.pdf_page_images or not api_key
    )

    if analyze_button:
        # Double-check preconditions right before starting
        if not api_key:
            st.error("‚ö†Ô∏è Por favor, insira sua Chave API do Google Gemini na barra lateral.")
        elif not st.session_state.selected_batch:
             st.error("‚ö†Ô∏è Por favor, selecione um batch de p√°ginas na barra lateral.")
        elif not st.session_state.pdf_page_images:
             # Should be caught earlier, but good as a safeguard
             st.error("‚ö†Ô∏è Nenhuma imagem de p√°gina encontrada. Fa√ßa upload e converta um PDF primeiro.")
        else:
            # --- Start Analysis Process ---
            st.session_state.analysis_running = True
            # Limpar resultado atual antes da nova an√°lise
            st.session_state.analysis_result = None
            st.session_state.error_message = None
            st.rerun() # Rerun imediato para mostrar o estado "rodando" e limpar resultados antigos

# --- Handle Analysis Execution (continua√ß√£o do if analyze_button, mas ap√≥s o rerun) ---
# This block runs *after* the rerun triggered by setting analysis_running to True
if st.session_state.analysis_running:
     # Show spinner while preparing and running analysis
     with st.spinner(f"Preparando e analisando o batch '{st.session_state.selected_batch}'... Isso pode levar um tempo."):
        # --- Determine Page Images to Analyze Based on Batch ---
        pages_to_process = []
        selected = st.session_state.selected_batch
        all_images = st.session_state.pdf_page_images
        total_pg = st.session_state.total_pages

        if selected == "Analisar Todas":
            pages_to_process = all_images
            st.info(f"Processando todas as {total_pg} p√°ginas...") # Log info is helpful
        else:
            # Use regex to find numbers in the selection string
            nums_str = re.findall(r'\d+', selected)
            try:
                if len(nums_str) == 1: # Single page case like "P√°gina 5"
                    start_page_label = int(nums_str[0])
                    end_page_label = start_page_label
                elif len(nums_str) == 2: # Range case like "P√°ginas 1-2"
                    start_page_label = int(nums_str[0])
                    end_page_label = int(nums_str[1])
                else:
                    # Should not happen with generated options, but handle defensively
                    raise ValueError(f"Formato de batch inesperado: {selected}")

                # Convert 1-based page labels to 0-based list indices
                start_index = start_page_label - 1
                # Slice goes up to, but not including, end_index, so use end_page_label directly
                end_index = end_page_label

                # Validate indices against available pages
                if 0 <= start_index < total_pg and start_index < end_index <= total_pg:
                    pages_to_process = all_images[start_index:end_index]
                    st.info(f"Analisando p√°ginas de {start_page_label} a {end_page_label}...")
                else:
                    st.warning(f"Intervalo de p√°ginas inv√°lido ({start_page_label}-{end_page_label}) para o total de {total_pg} p√°ginas no batch '{selected}'. Nenhuma p√°gina selecionada.")
                    pages_to_process = [] # Ensure it's empty

            except ValueError as parse_e:
                st.error(f"Erro ao interpretar a sele√ß√£o de batch '{selected}': {parse_e}. Tente selecionar novamente.")
                pages_to_process = [] # Ensure it's empty on parse error

        # --- Proceed with analysis ONLY if pages were successfully selected ---
        if pages_to_process:
            # Call the analysis function (contains its own spinner for the API call)
            analysis_markdown = analyze_pages_with_gemini_multimodal(
                    api_key,
                    pages_to_process, # Pass the list of PIL Image objects for the current batch
                )
            
            # Armazena o resultado no estado da sess√£o para este batch
            st.session_state.analysis_result = analysis_markdown
            # Salva tamb√©m no dicion√°rio de resultados por batch
            st.session_state.results_by_batch[selected] = analysis_markdown
            
            # Store potential errors from the analysis function itself if it returns error messages
            if "Erro Cr√≠tico" in analysis_markdown or "An√°lise Bloqueada" in analysis_markdown or "Erro de Gera√ß√£o" in analysis_markdown:
                 st.session_state.error_message = "A an√°lise retornou um erro. Veja detalhes abaixo." # Generic message, details are in analysis_result
                 # N√£o salva an√°lises com erro no dicion√°rio
                 if selected in st.session_state.results_by_batch:
                     del st.session_state.results_by_batch[selected]

        else:
            # If pages_to_process is empty due to errors above, set an error message
            if not st.session_state.error_message: # Avoid overwriting specific parsing errors
                  st.session_state.error_message = "Nenhuma p√°gina foi selecionada para an√°lise neste batch devido a um erro ou intervalo inv√°lido."

        # --- Analysis finished (or failed) ---
        st.session_state.analysis_running = False
        # Rerun again to display results/errors and re-enable the button
        st.rerun()

# --- Display Results or Errors ---
# Display errors prominently if they occurred
if st.session_state.error_message and not st.session_state.analysis_running:
    st.error(f"‚ö†Ô∏è {st.session_state.error_message}")

# Display results if available and analysis is not running
if st.session_state.analysis_result and not st.session_state.analysis_running:
    st.write(f"## üìä 3. Resultado da An√°lise Multimodal (Batch: {st.session_state.get('selected_batch', 'N/A')})")
    st.markdown(st.session_state.analysis_result, unsafe_allow_html=False) # Prefer False for safety

    # --- Download Button for the current result ---
    try:
        # Sanitize filename parts
        original_filename_base = "prova" # Default
        if st.session_state.original_filename:
             original_filename_base = os.path.splitext(st.session_state.original_filename)[0]
             original_filename_base = re.sub(r'[^\w\d-]+', '_', original_filename_base) # Sanitize

        batch_suffix = "completo"
        if st.session_state.selected_batch:
             batch_suffix = re.sub(r'[^\w\d-]+', '_', st.session_state.selected_batch).strip('_')

        download_filename = f"analise_multimodal_{original_filename_base}_batch_{batch_suffix}.md"

        st.download_button(
            label=f"üì• Baixar An√°lise do Batch Atual ({st.session_state.get('selected_batch', 'N/A')}) (Markdown)",
            data=st.session_state.analysis_result.encode('utf-8'), # Encode result string to bytes
            file_name=download_filename,
            mime="text/markdown"
        )
        
        # Op√ß√£o para baixar todas as an√°lises combinadas
        if len(st.session_state.results_by_batch) > 1:
            all_analyses = "\n\n---\n\n".join(st.session_state.results_by_batch.values())
            st.download_button(
                label=f"üì• Baixar TODAS as An√°lises Combinadas ({len(st.session_state.results_by_batch)} batches) (Markdown)",
                data=all_analyses.encode('utf-8'),
                file_name=f"analise_multimodal_{original_filename_base}_COMPLETA.md",
                mime="text/markdown"
            )
    except Exception as dl_e:
        st.warning(f"N√£o foi poss√≠vel gerar o bot√£o de download: {dl_e}")

